@import '../PrimitiveTokens.scss';

// Responsive breakpoints
@mixin respond-to($breakpoint) {
  @if $breakpoint == 'mobile' {
    @media (max-width: #{$breakpoint-s}) {
      @content;
    }
  } @else if $breakpoint == 'tablet' {
    @media (min-width: #{$breakpoint-m}) and (max-width: calc(#{$breakpoint-l} - 1px)) {
      @content;
    }
  } @else if $breakpoint == 'desktop' {
    @media (min-width: #{$breakpoint-l}) {
      @content;
    }
  } @else if $breakpoint == 'mobile-tablet' {
    @media (max-width: calc(#{$breakpoint-l} - 1px)) {
      @content;
    }
  } @else if $breakpoint == 'tablet-desktop' {
    @media (min-width: #{$breakpoint-m}) {
      @content;
    }
  }
}

// Typography mixins
@mixin heading-xl {
  font-size: $font-size-800;
  font-weight: $font-weight-semibold;
  line-height: $line-height-900;
  letter-spacing: $letter-spacing-m;
  
  @include respond-to($breakpoint-s) {
    font-size: $font-size-600;
    line-height: $line-height-700;
  }
}

@mixin heading-l {
  font-size: $font-size-700;
  font-weight: $font-weight-semibold;
  line-height: $line-height-800;
  letter-spacing: $letter-spacing-xs;
  
  @include respond-to($breakpoint-s) {
    font-size: $font-size-600;
    line-height: $line-height-700;
  }
}

@mixin heading-m {
  font-size: $font-size-600;
  font-weight: $font-weight-semibold;
  line-height: $line-height-700;
  letter-spacing: $letter-spacing-s;
  
  @include respond-to($breakpoint-s) {
    font-size: $font-size-500;
    line-height: $line-height-600;
  }
}

@mixin body-regular {
  font-size: $font-size-300;
  font-weight: $font-weight-book;
  line-height: $line-height-400;
  letter-spacing: $letter-spacing-xl;
  
  @include respond-to($breakpoint-s) {
    font-size: $font-size-200;
    line-height: $line-height-300;
  }
}

@mixin body-semibold {
  font-size: $font-size-300;
  font-weight: $font-weight-semibold;
  line-height: $line-height-400;
  letter-spacing: $letter-spacing-xl;
  
  @include respond-to($breakpoint-s) {
    font-size: $font-size-200;
    line-height: $line-height-300;
  }
}

// Shadow mixins
@mixin box-shadow-sm {
  box-shadow: 0 1px 2px rgba($neutral-900, 0.05);
}

@mixin box-shadow-md {
  box-shadow: 0 4px 6px rgba($neutral-900, 0.1);
}

@mixin box-shadow-lg {
  box-shadow: 0 10px 15px rgba($neutral-900, 0.1);
}

// Focus state
@mixin focus-ring {
  outline: none;
  box-shadow: 0 0 0 2px $border-focus;
}

// Radio button mixins
@mixin radio-button-size($size) {
  @if $size == 's' {
    width: $radio-outer-s;
    height: $radio-outer-s;
    
    &::after {
      width: $radio-inner-s;
      height: $radio-inner-s;
    }
  } @else if $size == 'm' {
    width: $radio-outer-m;
    height: $radio-outer-m;
    
    &::after {
      width: $radio-inner-m;
      height: $radio-inner-m;
    }
  } @else if $size == 'l' {
    width: $radio-outer-l;
    height: $radio-outer-l;
    
    &::after {
      width: $radio-inner-l;
      height: $radio-inner-l;
    }
  }
}

// Checkbox mixins
@mixin checkbox-size($size) {
  @if $size == 's' {
    width: $checkbox-size-s;
    height: $checkbox-size-s;
    
    .checkbox-inner {
      width: $checkbox-innersize-s;
      height: $checkbox-innersize-s;
    }
  } @else if $size == 'm' {
    width: $checkbox-size-m;
    height: $checkbox-size-m;
    
    .checkbox-inner {
      width: $checkbox-innersize-m;
      height: $checkbox-innersize-m;
    }
  } @else if $size == 'l' {
    width: $checkbox-size-l;
    height: $checkbox-size-l;
    
    .checkbox-inner {
      width: $checkbox-innersize-l;
      height: $checkbox-innersize-l;
    }
  }
}

// Toggle button mixins
@mixin toggle-button-size($size) {
  @if $size == 's' {
    border-radius: $toggle-buttonradius-s;
    
    &::before {
      border-radius: $toggle-buttonouterradius-s;
    }
  } @else if $size == 'm' {
    border-radius: $toggle-buttonradius-m;
    
    &::before {
      border-radius: $toggle-buttonouterradius-m;
    }
  } @else if $size == 'l' {
    border-radius: $toggle-buttonradius-l;
    
    &::before {
      border-radius: $toggle-buttonouterradius-l;
    }
  }
}

// Tab mixins
@mixin tab-size($size) {
  @if $size == 's' {
    padding: $tab-verticalpadding-s $tab-horzontalpadding-s;
  } @else if $size == 'm' {
    padding: $tab-verticalpadding-m $tab-horzontalpadding-m;
  } @else if $size == 'l' {
    padding: $tab-verticalpadding-l $tab-horzontalpadding-l;
  }
}